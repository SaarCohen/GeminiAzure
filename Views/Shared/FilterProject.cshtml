@model ItemFilterModel

@if (Model[ItemAttributeVisibility.Component])
{
<li class="attribute">
    <div title="@GetResource(ResourceKeys.Components)" class="header"><a>@GetResource(ResourceKeys.Components)</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label"></div>
    <ul class="filter-data">
        @Html.EditorFor(x => Model.Components, new { CssClass = "components-filter" })
    </ul>    
</li>    
}

@if (Model[ItemAttributeVisibility.FixedInVersion])
{
<li class="attribute">
    <div title="@GetResource(ResourceKeys.FixedInVersions)" class="header"><a>@GetResource(ResourceKeys.FixedInVersions)</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label"></div>
    <ul class="filter-data">
        @Html.EditorFor(x => Model.Versions, new { CssClass = "versions-filter" })
    </ul>    
</li>
}
@if (Model[ItemAttributeVisibility.AffectedVersions])
{
<li class="attribute">
    <div title="@GetResource(ResourceKeys.AffectedVersions)" class="header"><a>@GetResource(ResourceKeys.AffectedVersions)</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label"></div>
    <ul class="filter-data">
        @Html.EditorFor(x => Model.AffectedVersions, new { CssClass = "affectedversions-filter" })
    </ul>    
</li>
}
@if (Model[ItemAttributeVisibility.AssignedTo])
{
<li class="attribute">
    <div title="@GetResource(ResourceKeys.Resources)" class="header"><a>@GetResource(ResourceKeys.Resources)</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label"></div>
    <ul class="filter-data">
        @Html.EditorFor(x => Model.Resources, new { CssClass = "resources-filter" })
    </ul>    
</li>
}
@if (Model[ItemAttributeVisibility.Type])
{
<li class="attribute">
    <div title="@GetResource(ResourceKeys.Type)" class="header"><a>@GetResource(ResourceKeys.Type)</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label"></div>
    <ul class="filter-data">
        @Html.EditorFor(x => Model.Types, new { CssClass = "types-filter" })
    </ul>    
</li>
}
@if (Model[ItemAttributeVisibility.Priority])
{
<li class="attribute">
    <div title="@GetResource(ResourceKeys.Priority)" class="header"><a>@GetResource(ResourceKeys.Priority)</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label"></div>
    <ul class="filter-data">
        @Html.EditorFor(x => Model.Priorities, new { CssClass = "priorities-filter" })
    </ul>    
</li>
}
@if (Model[ItemAttributeVisibility.Severity])
{
<li class="attribute">
    <div title="@GetResource(ResourceKeys.Severity)" class="header"><a>@GetResource(ResourceKeys.Severity)</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label"></div>
    <ul class="filter-data">
       @Html.EditorFor(x => Model.Severities, new { CssClass = "severities-filter" })
    </ul>    
</li>
}
@if (Model[ItemAttributeVisibility.Status])
{
<li class="attribute">
    <div title="@GetResource(ResourceKeys.Status)" class="header"><a>@GetResource(ResourceKeys.Status)</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label"></div>
    <ul class="filter-data">
        @Html.EditorFor(x => Model.Statuses, new { CssClass = "statuses-filter" })
    </ul>    
</li>
}
@if (Model[ItemAttributeVisibility.Resolution])
{
<li class="attribute">
    <div title="@GetResource(ResourceKeys.Resolution)" class="header"><a>@GetResource(ResourceKeys.Resolution)</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label"></div>
    <ul class="filter-data">
        @Html.EditorFor(x => Model.Resolutions, new { CssClass = "resolutions-filter" })
    </ul>    
</li>
}

@{
    string title = string.Empty;
    if (Model[ItemAttributeVisibility.DateCreated] && Model[ItemAttributeVisibility.DateRevised])
    {
        title = @GetResource(ResourceKeys.Created) + " / " + @GetResource(ResourceKeys.Revised);
    }
    else if (Model[ItemAttributeVisibility.DateCreated])
    {
        title = @GetResource(ResourceKeys.Created);
    }
    else if (Model[ItemAttributeVisibility.DateRevised])
    {
        title = @GetResource(ResourceKeys.Revised);
    }
}

@if (Model[ItemAttributeVisibility.DateCreated] || Model[ItemAttributeVisibility.DateRevised])
{
<li class="attribute">
    <div title="@title" class="header filter-changer-text"><a>@title</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label">&nbsp;</div>
    <ul class="filter-data">
        <li class="help-text">today, today+7, today-1<br />
            start-month, end-month<br />
            start-week, end-week
        </li>
        @if (Model[ItemAttributeVisibility.DateCreated])
        {
            <li>@GetResource(ResourceKeys.Created)</li>
            <li>@Html.TextBoxFor(x => x.CreatedFrom, new { CssClass = "created-from-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
            <li>@Html.TextBoxFor(x => x.CreatedTo, new { CssClass = "created-to-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
        }
        @if (Model[ItemAttributeVisibility.DateRevised])
        {
            <li>@GetResource(ResourceKeys.Revised)</li>
            <li>@Html.TextBoxFor(x => x.RevisedFrom, new { CssClass = "revised-from-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
            <li>@Html.TextBoxFor(x => x.RevisedTo, new { CssClass = "revised-to-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
        }
    </ul>    
</li>
}

@{
    title = string.Empty;
    if (Model[ItemAttributeVisibility.ClosedDate] && Model[ItemAttributeVisibility.ResolvedDate])
    {
        title = @GetResource(ResourceKeys.ClosedDate) + " / " + @GetResource(ResourceKeys.ResolvedDate);
    }
    else if (Model[ItemAttributeVisibility.ClosedDate])
    {
        title = @GetResource(ResourceKeys.ClosedDate);
    }
    else if (Model[ItemAttributeVisibility.ResolvedDate])
    {
        title = @GetResource(ResourceKeys.ResolvedDate);
    }
}

@if (Model[ItemAttributeVisibility.ClosedDate] || Model[ItemAttributeVisibility.ResolvedDate])
{
<li class="attribute">
    <div title="@title" class="header filter-changer-text"><a>@title</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label">&nbsp;</div>
    <ul class="filter-data">
        <li class="help-text">today, today+7, today-1<br />
            start-month, end-month<br />
            start-week, end-week
        </li>
        @if (Model[ItemAttributeVisibility.ClosedDate])
        {
        <li>@GetResource(ResourceKeys.ClosedDate)</li>
        <li>@Html.TextBoxFor(x => x.ClosedFrom, new { CssClass = "closed-from-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
        <li>@Html.TextBoxFor(x => x.ClosedTo, new { CssClass = "closed-to-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
        }
        @if (Model[ItemAttributeVisibility.ResolvedDate])
        {
        <li>@GetResource(ResourceKeys.ResolvedDate)</li>
        <li>@Html.TextBoxFor(x => x.ResolvedFrom, new { CssClass = "resolved-from-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
        <li>@Html.TextBoxFor(x => x.ResolvedTo, new { CssClass = "resolved-to-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
        }
    </ul>    
</li>
}


@{
    title = string.Empty;
    if (Model[ItemAttributeVisibility.StartDate] && Model[ItemAttributeVisibility.DueDate])
    {
        title = @GetResource(ResourceKeys.StartDate) + " / " + @GetResource(ResourceKeys.DueDate);
    }
    else if (Model[ItemAttributeVisibility.StartDate])
    {
        title = @GetResource(ResourceKeys.StartDate);
    }
    else if (Model[ItemAttributeVisibility.DueDate])
    {
        title = @GetResource(ResourceKeys.DueDate);
    }
}


@if (Model[ItemAttributeVisibility.StartDate] || Model[ItemAttributeVisibility.DueDate])
{
<li class="attribute">
    <div title="@title" class="header filter-changer-text"><a>@title</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label">&nbsp;</div>
    <ul class="filter-data">
        <li class="help-text">today, today+7, today-1<br />
            start-month, end-month<br />
            start-week, end-week
        </li>
        @if (Model[ItemAttributeVisibility.StartDate])
        {
        <li>@GetResource(ResourceKeys.StartDate)</li>
        <li>@Html.TextBoxFor(x => x.StartFrom, new { CssClass = "start-from-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
        <li>@Html.TextBoxFor(x => x.StartTo, new { CssClass = "start-to-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
        }
        @if (Model[ItemAttributeVisibility.DueDate])
        {
        <li>@GetResource(ResourceKeys.DueDate)</li>
        <li>@Html.TextBoxFor(x => x.DueFrom, new { CssClass = "due-from-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
        <li>@Html.TextBoxFor(x => x.DueTo, new { CssClass = "due-to-filter", Class = "input-size4 filter-changer-text dateFormatted", data_date_format=string.Format("{0}",@GeminiContext.User.GeminiDateFormat) })</li>
        }
    </ul>    
</li>
}

<li class="attribute">
    <div title="@GetResource(ResourceKeys.Keywords)" class="header filter-changer-text"><a>@GetResource(ResourceKeys.Keywords)</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label filter-changer-text">&nbsp;</div>
    <ul class="filter-data">
        <li>@GetResource(ResourceKeys.Keywords)</li>
        <li>@Html.TextBoxFor(x => x.Keywords, new { CssClass = "keywords-filter", Class = "input-size4 filter-changer-text" })</li>
        <li>@GetResource(ResourceKeys.ItemId)</li>
        <li>@Html.TextBoxFor(x => x.ItemIds, new { CssClass = "itemids-filter", Class = "input-size4 filter-changer-text" })</li>
        @if(Model[ItemAttributeVisibility.ReportedBy]) { <li>@GetResource(ResourceKeys.ReportedBy)</li>
        <li>@Html.TextBoxFor(x => x.ReportedBy, new { CssClass = "reported-by-filter", Class = "input-size4 filter-changer-text" })</li>}
        @if(Model[ ItemAttributeVisibility.AssociatedWatchers]) { <li>@GetResource(ResourceKeys.FollowedBy)</li>
        <li>@Html.TextBoxFor(x => x.WatchedBy, new { CssClass = "watched-by-filter", Class = "input-size4 filter-changer-text" })</li> }
    </ul>    
</li>

@foreach (var customField in Model.CustomFields)
{
    string changer = null;
    switch (customField.Type)
    {
        case  CustomFieldFilterModel.FilterType.Numeric:
        case CustomFieldFilterModel.FilterType.Date:
        case CustomFieldFilterModel.FilterType.Text:
            changer = " filter-changer-text";
            break;
    }
    <li class="attribute custom-filter">
    <div title="@customField.Tooltip" class="header@(changer)"><a>@customField.Name</a></div>
    <div class="icon fonticon-arrow-down"></div>
    <div class="label filter-changer-text"></div>
    <ul class="filter-data">
        @Html.EditorFor(x => customField, "FilterListItem" /*,new { CssClass = "resolutions-filter" }*/)
    </ul>    
    </li>
}
    @if (@Model.CustomFields.Count >= @Model.FilterLimit)
    {

        <li class="filter-general-option">
                <a id="expand-collapse-filter" href="#">&uarr; &darr;</a> 
            <input id="filter-limit" type="hidden" value="@Model.CustomFields.Count" data-filterLimit="@Model.FilterLimit"/>
        </li>
    }